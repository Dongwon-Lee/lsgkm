#!/usr/bin/python
"""
	merge_lsgkm_models.py: merge SVM model files generated by lsgkm

	Copyright (C) 2021 Dongwon Lee

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys

def read_lsgkm_model(filename):
    fp = open(filename, 'r')
    is_header = True
    header = dict()
    sv = []
    for line in fp:
        if line[0:2] == "SV":
            is_header = False
            continue

        if is_header:
            g = line.strip().split(' ')
            header[g[0]] = g[1:]
        else:
            sv.append(line.strip())
    fp.close()

    return (header, sv)

def main(argv=sys.argv):
    if len(argv) < 3:
        print("Usage:", argv[0], " model1 model2 [model3 [model4 ...]]")
        sys.exit(0)

    nmodels = float(len(argv) - 1)

    sys.stderr.write("Processing %s\n" % (argv[1]))
    merged_header, merged_sv = read_lsgkm_model(argv[1])
    combined_sv = dict()
    for s in merged_sv:
        g = s.split()
        combined_sv[g[1]] = float(g[0])

    for model_fn in argv[2:]:
        sys.stderr.write("Processing %s\n" % (model_fn))
        header, sv = read_lsgkm_model(model_fn)
        for k in header:
            if k not in merged_header:
                sys.stderr.write("%s model is not compatible (no %s header key)\n" % (model_fn, k))
                sys.exit(1)
            else:
                if k == "total_sv":
                    merged_header[k][0] = int(merged_header[k][0]) + int(header[k][0])
                elif k == "rho":
                    merged_header[k][0] = float(merged_header[k][0]) + float(header[k][0])
                elif k == "nr_sv":
                    merged_header[k][0] = int(merged_header[k][0]) + int(header[k][0])
                    merged_header[k][1] = int(merged_header[k][1]) + int(header[k][1])
                else:
                    if header[k][0] != merged_header[k][0]: #values should be the same
                        sys.stderr.write("%s model is not compatible (%s is different, %s vs %s)\n" % (model_fn, k, header[k], merged_header[k]))
                        sys.exit(1)
        #merged_sv.extend(sv)
        for s in sv:
            g = s.split()
            if g[1] in combined_sv:
                combined_sv[g[1]] += float(g[0])
            else:
                combined_sv[g[1]] = float(g[0])

    
    nsv_pos = 0
    nsv_neg = 0
    for k, v in combined_sv.items():
        if v > 0:
            nsv_pos += 1
        else:
            nsv_neg += 1
    merged_header['total_sv'] = [nsv_pos + nsv_neg]
    merged_header['nr_sv'] = [nsv_pos, nsv_neg]

    merged_header['rho'][0] = merged_header['rho'][0]/nmodels

    #obtain the header order from the first model
    header_order = []
    fp = open(argv[1], 'r')
    for line in fp:
        if line[0:2] == "SV":
            break

        g = line.strip().split(' ')
        header_order.append(g[0])
    fp.close()

    #print out the merged model
    for header_key in header_order:
        print(header_key, ' '.join(map(str, merged_header[header_key])))
    print("SV")
    #for sv in merged_sv:
    #    print(sv)
    for k, v in combined_sv.items():
        print(v/nmodels, k)

if __name__ == "__main__":
    main()
